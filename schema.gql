scalar Date # diz bitch can use python datetime.datetime which has tzinfo
enum OkError {
  ok
  error
}
type Error {
  code: Int
  message: String
}
type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  connections: [Connection] # Necessary? not sure
}

type Connection {
  _id: ID!
  name: String!
  info: String
  contacts: [Contact]
  actions: [Action]
}

type Contact {
  type: String! # Could stand to be a big-ass enum
  content: String!
  connection: Connection
}

type Action {
  id: ID!
  title: String!
  due: Date!
  completed: Note
  notes: [Note]
  connection: Connection!
}

type Note {
  content: String!
  time: Date!
  action: Action
}

type Query {
  connections: [Connection]
  connection(_id: ID!): Connection
  actions(active: Boolean): [Action]! # Consider only allowing Action on a connection query.
  me: User
}

type SignupPayload {
  status: OkError!
  error: Error
  jwt: String
}

type LoginPayload {
  status: OkError!
  error: Error
  jwt: String
}

type Mutation {
  signup(name: String!, email: String!, password: String!): SignupPayload

  login(email: String!, password: String!): LoginPayload

  #   createConnection(
  #     name: String!
  #     contacts: [Contact] # Will this work?
  #     info: String
  #   ): Connection

  #   createContact(
  #     type: String!
  #     content: String!
  #     connection: ID!
  #   ): Connection # Maybe return just the created contact?

  #   createAction(
  #     title: String!
  #     due: Date!
  #     note: Note!
  #     connection: ID!
  #   ): Action

  #   createNote(
  #     content: String!
  #     time: Date!
  #     action: ID!
  #   ): Note # Should we return the Action instead?
}
