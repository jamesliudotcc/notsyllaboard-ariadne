scalar Date # diz bitch can use python datetime.datetime which has tzinfo

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  connections: [Connection] # Necessary? not sure
}

type Connection {
  id: ID!
  name: String!
  info: String
  contacts: [Contact]
  actions: [Action]
}

type Contact {
  type: String! # Could stand to be a big-ass enum
  content: String!
  connection: Connection
}

type Action {
  id: ID!
  title: String!
  due: Date!
  completed: Note
  notes: [Note]
  connection: Connection!
}

type Note {
  content: String!
  time: Date!
  action: Action
}

type Query {
  connections: [Connection]
  connection(id: ID!): Connection
  actions(user_id: ID!, active: Boolean): [Action]!
  me(id: ID!): User
}  

type SignupPayload {
  status: String!
  error: String
  user: User
}

type LoginPayload {
  status: String!
  error: String
  user: User
  # Some auth shit, maybe jwt?
}

# type Mutation {
#   signup(
#     name: String!
#     email: String!
#     password: String!
#   ): SignupPayload

#   login(
#     email: String!
#     password: String!
#   ): LoginPayload

#   createConnection(
#     name: String!
#     contacts: [Contact] # Will this work?
#     info: String
#   ): Connection
  
#   createContact(
#     type: String!
#     content: String!
#     connection: ID!
#   ): Connection # Maybe return just the created contact?

#   createAction(
#     title: String!
#     due: Date!
#     note: Note!
#     connection: ID!
#   ): Action

#   createNote(
#     content: String!
#     time: Date!
#     action: ID!
#   ): Note # Should we return the Action instead?
# }